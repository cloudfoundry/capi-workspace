#!/bin/bash

set -u
set -e
set -o pipefail

get_database_password(){
	cc_database_password=$(credhub get -n '/bosh-lite/cf/cc_database_password' --output-json | jq -r '.value')
}

ssh_tunnel(){
	# random port on local machine for the SSH tunnel
	mysql_port=$(gshuf -i 10000-65535 -n 1)
	mysql_ip=$(bosh is --column ips --column instance | grep ^database | cut -f 2)
	test -z "$mysql_port" && exit 1
	test -z "$mysql_ip" && exit 1
	bosh ssh --opts="-L ${mysql_port}:${mysql_ip}:3306" -c 'while true; do continue; done' database &
	ssh_pid=$!
}

connect_to_db(){
	# Make sure the ssh tunnel didn't error and exit
	if ! ps -p $ssh_pid > /dev/null; then
		echo "Error: SSH tunnel not running"
		exit 1
	fi

	# connect to the database via localhost:<random port>, using the SSH tunnel we created above
	mysql -ucloud_controller -p"${cc_database_password}" -P $mysql_port -h 127.0.0.1 cloud_controller
}

kill_tree() {
	pid=$1
	for child_pid in $(ps -axo pid,ppid | grep "${pid}$" | cut -d " " -f 1); do
		kill_tree $child_pid
	done

	kill $pid
}

set +u
if [ -z "$BOSH_ENVIRONMENT" ]; then
  echo "No bosh targeted. Use \"target_bosh\" before connecting to MySQL."
  exit 1
fi
set -u

{
	get_database_password &&
	ssh_tunnel &&
	sleep 5 &&
	connect_to_db &&
	kill_tree $ssh_pid
} || {
  # If any of the previous functions failed, kill the ssh process tree
  echo "Exiting due to error"
	kill_tree $ssh_pid
	exit 1
}

